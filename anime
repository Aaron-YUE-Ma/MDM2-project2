import bpy
import math

g = 9.81  
L = 2.0  
theta = math.radians(45)  
omega = 0.0  
dt = 0.05  
frames = 250  


bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()


bpy.ops.mesh.primitive_uv_sphere_add(radius=0.2, location=(L * math.sin(theta), -L * math.cos(theta), 0))
bob = bpy.context.object
bob.name = "Bob"

# Create fixed pivot point (for visualization only)
bpy.ops.mesh.primitive_uv_sphere_add(radius=0.1, location=(0, 0, 0))
pivot = bpy.context.object
pivot.name = "Pivot"
pivot.display_type = 'WIRE'  # Display as wireframe only
pivot.hide_render = True

# Create pendulum rod (add first, then set origin)
bpy.ops.mesh.primitive_cylinder_add(radius=0.05, depth=L, location=(0, -L / 2, 0))
rod = bpy.context.object
rod.name = "Rod"

# **Key Step: Set the rod's origin at the Pivot**
bpy.ops.object.origin_set(type='ORIGIN_CURSOR')  # Set origin to cursor position (Pivot)

# Set rotation mode
rod.rotation_mode = 'XYZ'
rod.rotation_euler = (0, 0, theta)
rod.keyframe_insert(data_path="rotation_euler", index=-1)


for frame in range(frames):
    bpy.context.scene.frame_set(frame)  # Set current frame

    # Update angle and angular velocity using Euler's method
    alpha = - (g / L) * math.sin(theta)  # Compute angular acceleration
    omega += alpha * dt  # Update angular velocity
    theta += omega * dt  # Update angle

    # Compute pendulum bob position
    x = L * math.sin(theta)
    y = -L * math.cos(theta)

    # Update bob position and insert keyframe
    bob.location = (x, y, 0)
    bob.keyframe_insert(data_path="location", index=-1)

    # Rotate the rod according to the angle
    rod.rotation_euler = (0, 0, theta)
    rod.keyframe_insert(data_path="rotation_euler", index=-1)

# Set playback range
bpy.context.scene.frame_start = 0
bpy.context.scene.frame_end = frames

# Force animation refresh
bpy.context.scene.frame_set(0)


